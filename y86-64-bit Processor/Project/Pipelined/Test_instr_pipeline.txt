//Test instructions 

    1. textbook example for ret hazard
    // ROM[0] = 8'b00110000;
    // ROM[1] = 8'b11110100;
    // ROM[2] = 8'b11111111;
    // ROM[3] = 8'b00000111;
    // ROM[4] = 8'b00000000;
    // ROM[5] = 8'b00000000;
    // ROM[6] = 8'b00000000;
    // ROM[7] = 8'b00000000;
    // ROM[8] = 8'b00000000;
    // ROM[9] = 8'b00000000;
    // ROM[10] = 8'b10000000;
    // ROM[11] = 8'b00011110;
    // ROM[12] = 8'b00000000;
    // ROM[13] = 8'b00000000;
    // ROM[14] = 8'b00000000;
    // ROM[15] = 8'b00000000;
    // ROM[16] = 8'b00000000;
    // ROM[17] = 8'b00000000;
    // ROM[18] = 8'b00000000;
    // ROM[19] = 8'b00110000;
    // ROM[20] = 8'b11110010;
    // ROM[21] = 8'b00001010;
    // ROM[22] = 8'b00000000;
    // ROM[23] = 8'b00000000;
    // ROM[24] = 8'b00000000;
    // ROM[25] = 8'b00000000;
    // ROM[26] = 8'b00000000;
    // ROM[27] = 8'b00000000;
    // ROM[28] = 8'b00000000;
    // ROM[29] = 8'b00000000;
    // ROM[30] = 8'b10010000;
    // ROM[31] = 8'b00100000;
    // ROM[32] = 8'b00100011;

    2. textbook example for mispredicted jmp
    // ROM[0] = 8'b01100011;
    // ROM[1] = 8'b00000000;
    // ROM[2] = 8'b01110011;
    // ROM[3] = 8'b00010110;
    // ROM[4] = 8'b00000000;
    // ROM[5] = 8'b00000000;
    // ROM[6] = 8'b00000000;
    // ROM[7] = 8'b00000000;
    // ROM[8] = 8'b00000000;
    // ROM[9] = 8'b00000000;
    // ROM[10] = 8'b00000000;
    // ROM[11] = 8'b00110000;
    // ROM[12] = 8'b11110000;
    // ROM[13] = 8'b00000001;
    // ROM[14] = 8'b00000000;
    // ROM[15] = 8'b00000000;
    // ROM[16] = 8'b00000000;
    // ROM[17] = 8'b00000000;
    // ROM[18] = 8'b00000000;
    // ROM[19] = 8'b00000000;
    // ROM[20] = 8'b00000000;
    // ROM[21] = 8'b00000000;
    // ROM[22] = 8'b00110000;
    // ROM[23] = 8'b11110010;
    // ROM[24] = 8'b00000010;
    // ROM[25] = 8'b00000000;
    // ROM[26] = 8'b00000000;
    // ROM[27] = 8'b00000000;
    // ROM[28] = 8'b00000000;
    // ROM[29] = 8'b00000000;
    // ROM[30] = 8'b00000000;
    // ROM[31] = 8'b00000000;
    // ROM[32] = 8'b00110000;
    // ROM[33] = 8'b11110011;
    // ROM[34] = 8'b00000011;
    // ROM[35] = 8'b00000000;
    // ROM[36] = 8'b00000000;
    // ROM[37] = 8'b00000000;
    // ROM[38] = 8'b00000000;
    // ROM[39] = 8'b00000000;
    // ROM[40] = 8'b00000000;
    // ROM[41] = 8'b00000000;
    // ROM[42] = 8'b00000000;

    3. textbook example load/use hazard
        // ROM[0] = 8'b00110000;
        // ROM[1] = 8'b11110010;
        // ROM[2] = 8'b10000000;
        // ROM[3] = 8'b00000000;
        // ROM[4] = 8'b00000000;
        // ROM[5] = 8'b00000000;
        // ROM[6] = 8'b00000000;
        // ROM[7] = 8'b00000000;
        // ROM[8] = 8'b00000000;
        // ROM[9] = 8'b00000000;
        // ROM[10] = 8'b00110000;
        // ROM[11] = 8'b11110001;
        // ROM[12] = 8'b00000011;
        // ROM[13] = 8'b00000000;
        // ROM[14] = 8'b00000000;
        // ROM[15] = 8'b00000000;
        // ROM[16] = 8'b00000000;
        // ROM[17] = 8'b00000000;
        // ROM[18] = 8'b00000000;
        // ROM[19] = 8'b00000000;
        // ROM[20] = 8'b01000000;
        // ROM[21] = 8'b00010010;
        // ROM[22] = 8'b00000000;
        // ROM[23] = 8'b00000000;
        // ROM[24] = 8'b00000000;
        // ROM[25] = 8'b00000000;
        // ROM[26] = 8'b00000000;
        // ROM[27] = 8'b00000000;
        // ROM[28] = 8'b00000000;
        // ROM[29] = 8'b00000000;
        // ROM[30] = 8'b00110000;
        // ROM[31] = 8'b11110011;
        // ROM[32] = 8'b00001010;
        // ROM[33] = 8'b00000000;
        // ROM[34] = 8'b00000000;
        // ROM[35] = 8'b00000000;
        // ROM[36] = 8'b00000000;
        // ROM[37] = 8'b00000000;
        // ROM[38] = 8'b00000000;
        // ROM[39] = 8'b00000000;
        // ROM[40] = 8'b01010000;
        // ROM[41] = 8'b00100000;
        // ROM[42] = 8'b00000000;
        // ROM[43] = 8'b00000000;
        // ROM[44] = 8'b00000000;
        // ROM[45] = 8'b00000000;
        // ROM[46] = 8'b00000000;
        // ROM[47] = 8'b00000000;
        // ROM[48] = 8'b00000000;
        // ROM[49] = 8'b00000000;
        // ROM[50] = 8'b01100000;
        // ROM[51] = 8'b00110000;
        // ROM[52] = 8'b00000000;

    4. Fibonacci from fib.txt
    
    5. sample self
        // ROM[0] = 8'b00110000;
        // ROM[1] = 8'b11110111;
        // ROM[2] = 8'b00001111;
        // ROM[3] = 8'b00000000;
        // ROM[4] = 8'b00000000;
        // ROM[5] = 8'b00000000;
        // ROM[6] = 8'b00000000;
        // ROM[7] = 8'b00000000;
        // ROM[8] = 8'b00000000;
        // ROM[9] = 8'b00000000;
        // ROM[10] = 8'b00110000;
        // ROM[11] = 8'b11110110;
        // ROM[12] = 8'b00001100;
        // ROM[13] = 8'b00000000;
        // ROM[14] = 8'b00000000;
        // ROM[15] = 8'b00000000;
        // ROM[16] = 8'b00000000;
        // ROM[17] = 8'b00000000;
        // ROM[18] = 8'b00000000;
        // ROM[19] = 8'b00000000;
        // ROM[20] = 8'b01000000;
        // ROM[21] = 8'b01100000;
        // ROM[22] = 8'b00001011;
        // ROM[23] = 8'b00000000;
        // ROM[24] = 8'b00000000;
        // ROM[25] = 8'b00000000;
        // ROM[26] = 8'b00000000;
        // ROM[27] = 8'b00000000;
        // ROM[28] = 8'b00000000;
        // ROM[29] = 8'b00000000;
        // ROM[30] = 8'b10000000;
        // ROM[31] = 8'b00110000;
        // ROM[32] = 8'b00000000;
        // ROM[33] = 8'b00000000;
        // ROM[34] = 8'b00000000;
        // ROM[35] = 8'b00000000;
        // ROM[36] = 8'b00000000;
        // ROM[37] = 8'b00000000;
        // ROM[38] = 8'b00000000;
        // ROM[39] = 8'b01110010;
        // ROM[40] = 8'b00110011;
        // ROM[41] = 8'b00000000;
        // ROM[42] = 8'b00000000;
        // ROM[43] = 8'b00000000;
        // ROM[44] = 8'b00000000;
        // ROM[45] = 8'b00000000;
        // ROM[46] = 8'b00000000;
        // ROM[47] = 8'b00000000;
        // ROM[48] = 8'b01100001;
        // ROM[49] = 8'b01100111;
        // ROM[50] = 8'b10010000;
        // ROM[51] = 8'b01010000;
        // ROM[52] = 8'b00001100;
        // ROM[53] = 8'b00001011;
        // ROM[54] = 8'b00000000;
        // ROM[55] = 8'b00000000;
        // ROM[56] = 8'b00000000;
        // ROM[57] = 8'b00000000;
        // ROM[58] = 8'b00000000;
        // ROM[59] = 8'b00000000;
        // ROM[60] = 8'b00000000;
        // ROM[61] = 8'b01100011;
        // ROM[62] = 8'b11000110;
        // ROM[63] = 8'b00000000;

    6. combo - load/use and ret

    irmovq $1, %rax
    rmmovq %rax, 0(%rdx)
    call combo
    addq %rcx, %rax
    halt 
    combo:
        mrmovq 0(%rdx), %rcx
        addq %rcx, %rax
        ret 

        // ROM[0] = 8'b00110000;
        // ROM[1] = 8'b11110000;
        // ROM[2] = 8'b00000001;
        // ROM[3] = 8'b00000000;
        // ROM[4] = 8'b00000000;
        // ROM[5] = 8'b00000000;
        // ROM[6] = 8'b00000000;
        // ROM[7] = 8'b00000000;
        // ROM[8] = 8'b00000000;
        // ROM[9] = 8'b00000000;
        // ROM[10] = 8'b01000000;
        // ROM[11] = 8'b00000010;
        // ROM[12] = 8'b00000000;
        // ROM[13] = 8'b00000000;
        // ROM[14] = 8'b00000000;
        // ROM[15] = 8'b00000000;
        // ROM[16] = 8'b00000000;
        // ROM[17] = 8'b00000000;
        // ROM[18] = 8'b00000000;
        // ROM[19] = 8'b00000000;
        // ROM[20] = 8'b10000000;
        // ROM[21] = 8'b00100000;
        // ROM[22] = 8'b00000000;
        // ROM[23] = 8'b00000000;
        // ROM[24] = 8'b00000000;
        // ROM[25] = 8'b00000000;
        // ROM[26] = 8'b00000000;
        // ROM[27] = 8'b00000000;
        // ROM[28] = 8'b00000000;
        // ROM[29] = 8'b01100000;
        // ROM[30] = 8'b00010000;
        // ROM[31] = 8'b00000000;
        // ROM[32] = 8'b01010000;
        // ROM[33] = 8'b00100001;
        // ROM[34] = 8'b00000000;
        // ROM[35] = 8'b00000000;
        // ROM[36] = 8'b00000000;
        // ROM[37] = 8'b00000000;
        // ROM[38] = 8'b00000000;
        // ROM[39] = 8'b00000000;
        // ROM[40] = 8'b00000000;
        // ROM[41] = 8'b00000000;
        // ROM[42] = 8'b01100000;
        // ROM[43] = 8'b00010000;
        // ROM[44] = 8'b10010000;

    7. combo - mispredicted jmp and ret

    irmovq $2, %rcx
    call main
    halt
    main:
        irmovq $1, %rax
        call combo
        addq %rcx, %rax
        halt
        combo:
            jle miss
            addq %rax, %rax
            ret
        miss:
            ret

        // ROM[0] = 8'b00110000;
        // ROM[1] = 8'b11110001;
        // ROM[2] = 8'b00000010;
        // ROM[3] = 8'b00000000;
        // ROM[4] = 8'b00000000;
        // ROM[5] = 8'b00000000;
        // ROM[6] = 8'b00000000;
        // ROM[7] = 8'b00000000;
        // ROM[8] = 8'b00000000;
        // ROM[9] = 8'b00000000;
        // ROM[10] = 8'b10000000;
        // ROM[11] = 8'b00010100;
        // ROM[12] = 8'b00000000;
        // ROM[13] = 8'b00000000;
        // ROM[14] = 8'b00000000;
        // ROM[15] = 8'b00000000;
        // ROM[16] = 8'b00000000;
        // ROM[17] = 8'b00000000;
        // ROM[18] = 8'b00000000;
        // ROM[19] = 8'b00000000;
        // ROM[20] = 8'b00110000;
        // ROM[21] = 8'b11110000;
        // ROM[22] = 8'b00000001;
        // ROM[23] = 8'b00000000;
        // ROM[24] = 8'b00000000;
        // ROM[25] = 8'b00000000;
        // ROM[26] = 8'b00000000;
        // ROM[27] = 8'b00000000;
        // ROM[28] = 8'b00000000;
        // ROM[29] = 8'b00000000;
        // ROM[30] = 8'b10000000;
        // ROM[31] = 8'b00101010;
        // ROM[32] = 8'b00000000;
        // ROM[33] = 8'b00000000;
        // ROM[34] = 8'b00000000;
        // ROM[35] = 8'b00000000;
        // ROM[36] = 8'b00000000;
        // ROM[37] = 8'b00000000;
        // ROM[38] = 8'b00000000;
        // ROM[39] = 8'b01100000;
        // ROM[40] = 8'b00010000;
        // ROM[41] = 8'b00000000;
        // ROM[42] = 8'b01110001;
        // ROM[43] = 8'b00110110;
        // ROM[44] = 8'b00000000;
        // ROM[45] = 8'b00000000;
        // ROM[46] = 8'b00000000;
        // ROM[47] = 8'b00000000;
        // ROM[48] = 8'b00000000;
        // ROM[49] = 8'b00000000;
        // ROM[50] = 8'b00000000;
        // ROM[51] = 8'b01100000;
        // ROM[52] = 8'b00000000;
        // ROM[53] = 8'b10010000;
        // ROM[54] = 8'b10010000;

    8. Moving average system from mvgavg.txt
    